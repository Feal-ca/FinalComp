
EXERCISE 1
To check the Achitecure and processor model info the following commands can be used:
#cat /proc/cpuinfo”
lscpu
The cat is to show content of the file 'cpuinfo' inside the folder 'proc'.

    - Architecture and processor model: x86_64 nad the processor model is 11th Gen Intel(R) Core(TM) i5-11500 @ 2.70GHz (Model Name)
    - Number of CPUs, cores, and hardware threads per chen, we can see the(found next to processor name)



EXERCISE 2
Can be found as in exercise 1 but to check only the info of the cache, the following command can be used.
#lscpu -C
    NAME ONE-SIZE ALL-SIZE WAYS TYPE        LEVEL  SETS PHY-LINE COHERENCY-SIZE
    L1d       48K     288K   12 Data            1    64        1             64
    L1i       32K     192K    8 Instruction     1    64        1             64
    L2       512K       3M    8 Unified         2  1024        1             64
    L3        12M      12M   16 Unified         3 12288        1             64

Then, as we can see, there are two L1 of 64 sets, one for data and one for instructions. Then there's a single L2 of 1024 sets. Finally, there's a L3 of 12288 sets and one line.
The L1 and L2 are exclusive of every core while L3 is shared for all six cores.




EXERCISE 3
a) The command line to run a SINGLE instance of “./integers” program in a processing unit
    # ./launch.sh 0 ./integers
    where '0' refers to the processing unit 0. If the number was changed it would be executed in another processing unit.

b) The elapsed and %CPU will be the baseline performance of this program
    22.14 seconds and 99%CPU

c) The command line to run a SINGLE instance of “./floats” program in a processing unit
    # ./launch.sh 0 ./float
    where '0' refers to the processing unit 0. If the number was changed it would be executed in another processing unit.

d) The elapsed and %CPU will be the baseline performance of this program
    22.69 seconds and 99% CPU

e) The command line to run a SINGLE instance of “./mems” program in a processing unit
    # ./launch.sh 0 ./mems
    where '0' refers to the processing unit 0. If the number was changed it would be executed in another processing unit.

f) The elapsed and %CPU will be the baseline performance of this program
    18.43 seconds and 99% CPU



EXERCISE 4
a) The command line to run the experiment for a given program type
    In order to run them simultaneously we just call them all in the same command like
        # ./launch.sh 0 ./mems 0 ./mems 0./mems
    We need to indicate the number o the core the three times we call the program.

b) Average elapsed and %CPU
    55.29 seconds (aprox 3 times the average elapse when only one is executed) and 33% CPU (1/3 for each)

The same proportional increases happen for the programs integer and float.





EXERCISE 5
a) the average execution time of both access approaches:
    - access per row: 2.31 seconds

    - access per column: 2.31 secons


b) the execution using “valgrind”. To use it, you have to execute the command as follows:
“#>valgrind --tool=cachegrind PROGRAM” where “PROGRAM” is the name of the binary. Pay special
attention to L1 refs, L1 misses, LL refs, LLd misses (data-L1 and L2 caches, respectively)


c) according to the three different types of cache misses (cold, conflict, capacity) introduced in
theory lectures, what is the majority type of misses you think that occurs during the different
initializations?
With the access for rows  there are capacity misses.
With the access for columns there are concflict misses.



EXERCISE 6
a) the average execution time of both access approaches.
    - access per row: 2.93 seconds

    - access per column: 2.93 secons

b) the execution using “valgrind”, paying special attention to cache performance
measurements.
c) according to the three different types of cache misses (cold, conflict, capacity) introduced in
theory lectures, what is the reason there is a difference of number of misses compared to the ones
obtained in the previous exercise?
